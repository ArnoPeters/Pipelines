# This pipeline creates a new repo in an Azure Devops Team Project Collection, based on an existing repo. 
# It emulates the same functionality as Github's template repositories.

# Prerequisites: 
# - The account for the project's Build Service (not the Project Collection Build Service) needs permissions: 
#   Project Settings -> Repos -> Repositories -> Security -> select the project's Build Service -> set "Create Repository" to "Allow"
# - Ensure your Azure Devops organisation is switched to use new url scheme (dev.azure.com/your-organisation)
#   - When using the classic url scheme (your-organisation.visualstudio.com), it is actually possible to access your organisation using BOTH. 
#     This confuses the system variables, which will only return the OLD urls, and prevents the script from working if you try to access your organisation using the NEW url scheme.
#   - By setting the switch to only the new url scheme, it will rewrite your url if you access your organisation on the old scheme. This ensures the script always uses a valid url. 
#   - More details: https://learn.microsoft.com/en-us/azure/devops/release-notes/2018/sep-10-azure-devops-launch#administration
# - TODO: Test requirements with Github private repositories
# - Public repositories require no authentication, and just work as template repository source. 

# Installation
# - Add this pipeline to Azure Devops.  
# - Line 42: Replace the 'default' value with the name of the default template repo in your Team Project Collection, or a valid URL to a git repo which can be accessed. 

# Usage
# Run the pipeline from Azure Devops. It has some required parameters to specify the source and target repo, and what branch to use. After running, a new repo will have been added to Azure Devops.
# - For a template repository within the same Azure Devops Team Project Collection, it is not necessary to enter the full url to template repo: using only the name will suffice. 
# - For a template repository in Github, use the full url (http://github.com/account/repo.git) instead.
#
# The new repo will be identical to the existing repo, but: 
# - Only one branch will be cloned
# - All on the source repo commits will be reset into 1 single initial commit on the new repo

# Credits
# This pipeline is inspired by (and partially based on) a blogpost from Stephen Allwright. 
# https://stephenallwright.com/project-template-repository-azure-devops/

name: "Create new repo '${{ parameters.newRepoName }}'"
appendCommitMessageToRunName: false # Commit message on source repo has nothing to do with what this pipeline does when run. Do not display.

parameters:
- name: 'newRepoName'
  type: string
  displayName: 'Name of the new repository'
- name: 'templateRepo'
  type: string
  displayName: 'Template repository: GIT url, OR repository name within this Team Project Collection'
  default: "https://github.com/ArnoPeters/BaseRepo-AzDO-CSharp"
- name: 'templateRepoBranch'
  displayName: 'Source branch from the template repository'
  type: string
  default: 'main'

trigger:
  - none

pool:
  vmImage: "ubuntu-latest"

jobs:
- job: 
  displayName: "Create new repository '${{ parameters.newRepoName }}' from template @ '${{ parameters.templateRepo }}'"
  steps:
  - checkout: none
  - bash: |
      sourceRepo='${{ parameters.templateRepo }}'
      userName='$(Build.RequestedFor)'
      userEmail='$(Build.RequestedForEmail)'
      project='$(System.TeamProject)'
      projectUriEscaped=$(jq -rn --arg x "${project}" '$x|@uri')
      collectionUrl='$(System.CollectionUri)'
      sourceBranch='${{ parameters.templateRepoBranch }}'
      workingDir='$(Build.SourcesDirectory)'
      newRepoName='${{ parameters.newRepoName }}'
      newRepoPrefix="${collectionUrl}${projectUriEscaped}/_git/"
      
      if [[ "${sourceRepo}" =~ ^"http" ]]; then
        sourceRepoUrl="${sourceRepo}"
      else
        only uri encode if only repo name. 
        sourceRepoName=$(jq -rn --arg x "${sourceRepo}" '$x|@uri')
        sourceRepoUrl="${newRepoPrefix}${sourceRepoName}"
      fi
            
      # Login to DevOps using your system access token
      echo $(System.AccessToken) | az devops login

      # pre-flight check if new repo does not already exists.
      cmd=("az repos list --organization \"${collectionUrl}\" --project \"${project}\"")
      #out=$(eval "$cmd")
      repoAlreadyExists=$(eval "$cmd" | jq -e ".[] | select(.name == \"${newRepoName}\")")
      
      if [[ "$repoAlreadyExists" != "" ]]; then
        echo "##[error]Repository '${newRepoName}' already exists. Aborting."  
      else
        echo "##[debug]Setting extra header for '${newRepoPrefix}'."
        git config --global --add "http.$newRepoPrefix.extraHeader" "Authorization: Bearer $(System.AccessToken)"

        # Clone the template repo to the agent. Using the extraheader solves the problem of having to alter the url. 
        echo "##[debug]Cloning template repository."
        git clone "${sourceRepoUrl}" \
          -b "${sourceBranch}" \
          --single-branch \
          --no-tags \
          "${workingDir}"
        
        # Mixed reset to first commit, then push with amend.
        # NOTE: .git folder is NOT removed! This is to keep modules and other settings working properly.
        echo "##[debug]Resetting commits before upload."
        initialCommitSha=$(git rev-list --max-parents=0 --abbrev-commit HEAD)
        git reset --mixed $initialCommitSha
        
        # Recommit everything in the repo, replacing the first commit with whatever the template repo provides. 
        # NOTE: requires one time use of name / email. Does not need to go in agent global config. 
        echo "##[debug]Adding files and creating new initial commit."
        git add --all 
        git -c user.name="${userName}" -c user.email="${userEmail}"  commit --amend  -m "Copied from template repo '${sourceRepo}'"

        # Create new empty repo
        echo "##[debug]Creating new repository in Azure Devops"
        az repos create --name "${newRepoName}" --organization "${collectionUrl}" --project "${project}"

        # Add the new remote. Original remote is kept as 'template'
        # And push everything into the new repo.
        echo "##[debug]Pushing source to new repository."
        git remote rename origin template
        git remote add origin "${newRepoPrefix}${newRepoName}"
        git push -u origin --all 
      fi
    displayName: 'Replicate repository based on template'
    