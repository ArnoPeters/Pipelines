parameters:
- name: 'subscription'
  type: string
- name: 'resourceGroupName'
  type: string
  default: ''
- name: 'resourceLocation'
  type: string
  default: ''
- name: 'templateFile'
  type: string
- name: 'templateParameterFile'
  type: string
  default: ''
- name: 'parameterOverrides'
  type: string
  default: ''
- name: 'outputVariableNamePrefix'
  type: string
  default: ''
- name: 'deploymentName'
  type: string
  default: ''
- name: 'deploymentMode'
  type: string
  default: 'incremental'
  values:
  - 'incremental'      
  - 'complete'
- name: 'deploymentLevel'
  type: string
  default: 'resourceGroup'
  values:
  - 'subscription'
  - 'resourceGroup'
steps:

# Based on the script found on https://blog.johnnyreilly.com/2021/03/20/bicep-meet-azure-pipelines/
# Enhanded around standard Azure CLI script https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/add-template-to-azure-pipelines?tabs=CLI

- task: AzureCLI@2
  displayName: 'Azure CLI Deployment to ${{ parameters.deploymentLevel }}'
  env:
    deploymentName: '${{ parameters.deploymentName }}'
    deploymentMode: '${{ parameters.deploymentMode }}'
    deploymentLevel: '${{ parameters.deploymentLevel }}'
    outputVariableNamePrefix: '${{ parameters.outputVariableNamePrefix }}'
    parameterOverrides: '${{ parameters.parameterOverrides }}'
    resourceLocation: '${{ parameters.resourceLocation }}'
    resourceGroupName: '${{ parameters.resourcegroupName }}'
    templateFile: '${{ parameters.templateFile }}'
    templateParameterFile: '${{ parameters.templateParameterFile }}'
  inputs:
    failOnStandardError: true
    azureSubscription: '${{ parameters.subscription }}'
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |    
      # Path sanitizing for Linux
      templateFile="${templateFile//\\//}"
      templateParameterFile="${templateParameterFile//\\//}"

      if [ "$deploymentName" == "" ]; then 
        deploymentName="$(date +%Y%m%d-%H%M%S)-deployment"
      fi

      params=""
      if [ "$parameterOverrides" != "" ]; then 
        params+=$" --parameters $parameterOverrides"
      fi
      if [ "$templateParameterFile" != "" ]; then 
        params+=" --parameters \"@$templateParameterFile\""
      fi

      {
        echo '##[section]Deploy template'
        if [ $deploymentLevel == 'subscription' ]; then
        {
          cmd="az deployment sub create --name \"$deploymentName\" --location \"$resourceLocation\" --template-file \"$templateFile\" $params"
          echo "##[command]$cmd"
          eval "$cmd"
        } && {
          cmd="az deployment sub show --name \"$deploymentName\" --query properties.outputs"
          echo $cmd
          deploymentoutputs=$(eval $cmd)
        }
        else
        {
          cmd="az deployment group create --name \"$deploymentName\" --mode \"$deploymentMode\" --resource-group \"$resourceGroupName\" --template-file \"$templateFile\" $params"
          echo "##[command]$cmd"
          eval "$cmd"
        } && {
          cmd="az deployment group show --resource-group \"$resourceGroupName\" --name \"$deploymentName\" --query properties.outputs"
          echo "##[command]$cmd"
          deploymentoutputs=$(eval "$cmd")
        }
      fi
      } && {
        echo '##[section]Convert outputs to variables'
        echo $deploymentoutputs | jq -c '. | to_entries[] | [.key, .value.value, .value.type]' |
          while IFS=$"\n" read -r c; do
            keyname=$(echo "$c" | jq -r '.[0]')
            value=$(echo "$c" | jq -r '.[1]')
            type=$(echo "$c" | jq -r '.[2]')
            
            if [ "$type" == "SecureString" ]; then
              echo "##vso[task.setvariable variable=$outputVariableNamePrefix$keyname;issecret=true]$value"
              echo "Added variable '$outputVariableNamePrefix$keyname' ('$type') with secret value '******'"
            elif [ "$type" == "String" ]; then 
              echo "##vso[task.setvariable variable=$outputVariableNamePrefix$keyname]$value"
              echo "Added variable '$outputVariableNamePrefix$keyname' ('$type') with value '$value'"
            else 
              echo "##[warning]Skipped output variable conversion: Type '$type' is not supported for '$keyname'"
            fi
            
          done    
      } 