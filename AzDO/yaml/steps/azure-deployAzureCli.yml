parameters:
- name: 'azureServiceConnectionName'
  type: string
  displayName: 'Name of the service connection to use for deployment'
- name: 'subscription'
  type: string
  displayName: 'Name of the target subscription (only used on "subscription" deployment level)'
- name: 'resourceGroupName'
  type: string
  default: ''
  displayName: 'Name of the target resource group (only used on "resourceGroup" deployment level)'
- name: 'managementGroupId'
  type: string
  default: ''  
  displayName: 'Management Group ID. (only used on "managementGroup" deployment level)'
- name: 'azureDeploymentDataLocation'
  type: string
  default: ''
  displayName: 'Location for the resources in Azure'
- name: 'templateFile'
  type: string
  displayName: 'Bicep or ARM template file'
- name: 'templateParameterFile'
  type: string
  default: ''
  displayName: 'ARM (.json) or Bicep (.bicepparam) parameter file'
- name: 'parameterOverrides'
  type: string
  default: ''
  displayName: 'Custom parameter overrides'
- name: 'outputVariableNamePrefix'
  type: string
  default: ''
  displayName: 'Prefix for the output variables'
- name: 'deploymentName'
  type: string
  default: ''
  displayName: 'Name of the deployment'
- name: 'deploymentMode'
  type: string
  default: 'Incremental'
  values:
  - 'Incremental'      
  - 'Complete'
  displayName: 'Deployment Mode (only used on "resourceGroup" deployment level)'
- name: 'deploymentLevel'
  type: string
  default: 'resourceGroup'
  values:
  - 'tenant'
  - 'managementGroup'
  - 'subscription'
  - 'resourceGroup'
  displayName: 'Target level of the deployment'
- name: 'showExpectedChanges'
  type: boolean
  default: false
  displayName: 'Show expected changes'
steps:

# Originally based on the script found on https://blog.johnnyreilly.com/2021/03/20/bicep-meet-azure-pipelines/
# Enhanded around standard Azure CLI script https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/add-template-to-azure-pipelines?tabs=CLI

- task: AzureCLI@2
  displayName: 'Azure CLI Deployment to ${{ parameters.deploymentLevel }}'
  env:
    deploymentName: '${{ parameters.deploymentName }}'
    deploymentMode: '${{ parameters.deploymentMode }}'
    deploymentLevel: '${{ parameters.deploymentLevel }}'
    outputVariableNamePrefix: '${{ parameters.outputVariableNamePrefix }}'
    parameterOverrides: '${{ parameters.parameterOverrides }}'
    azureDeploymentDataLocation: '${{ parameters.azureDeploymentDataLocation }}'
    resourceGroupName: '${{ parameters.resourceGroupName }}'
    templateFile: '${{ parameters.templateFile }}'
    templateParameterFile: '${{ parameters.templateParameterFile }}'
    showExpectedChanges: '${{ parameters.showExpectedChanges }}'
    managementGroupId: '${{ parameters.managementGroupId }}'
    subscription: '${{ parameters.subscription }}'
  inputs:
    failOnStandardError: true
    azureSubscription: '${{ parameters.azureServiceConnectionName }}'
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |    
      # Ensure Azure CLI is up to date. May generate warning, can be ignored
      echo '##[section]Ensure Azure CLI is up to date'
      exec 3>&2
      exec 2> /dev/null
      az bicep upgrade
      exec 2>&3

      # Path sanitizing for Linux
      templateFile="${templateFile//\\//}"
      templateParameterFile="${templateParameterFile//\\//}"

      if [ "$deploymentName" == "" ]; then 
        deploymentName="$(date +%Y%m%d-%H%M%S)-deployment"
      fi

      params=""
      if [ "$parameterOverrides" != "" ]; then 
        params+=$" --parameters $parameterOverrides"
      fi
      if [ "$templateParameterFile" != "" ]; then 
        params+=" --parameters \"$templateParameterFile\""
      fi
      {
        if [ $deploymentLevel == 'tenant' ]; then
          cmd="az deployment tenant create --location \"$azureDeploymentDataLocation\""
          outputsCmd="az deployment tenant show"
        elif [ $deploymentLevel == 'managementGroup' ]; then
          cmd="az deployment mg create --management-group-id \"$managementGroupId\" --location \"$azureDeploymentDataLocation\""
          outputsCmd="az deployment mg show --management-group-id \"$managementGroupId\""
        elif [ $deploymentLevel == 'subscription' ]; then
          cmd="az deployment sub create --subscription \"$subscription\" --location \"$azureDeploymentDataLocation\""
          outputsCmd="az deployment sub show"
        elif [ $deploymentLevel == 'resourceGroup' ]; then 
          cmd="az deployment group create --subscription \"$subscription\" --resource-group \"$resourceGroupName\" --mode \"$deploymentMode\""
          outputsCmd="az deployment group show --resource-group \"$resourceGroupName\""
        fi
        cmd="$cmd --name \"$deploymentName\" --template-file \"$templateFile\"$params"
        outputsCmd="$outputsCmd --name \"$deploymentName\" --query properties.outputs"
        echo "##[command]$cmd"
        if [[ "${showExpectedChanges,,}" == "true" ]]; then 
          echo '##[section]Template: expected changes'
          eval "$cmd --what-if -w"
        fi
        echo '##[section]Template: deployment'
        eval "$cmd"
        deploymentoutputs=$(eval "$outputsCmd")
      } && {
        echo '##[section]Convert outputs to variables'
        echo $deploymentoutputs | jq -c '. | to_entries[] | [.key, .value.value, .value.type]' |
          while IFS=$"\n" read -r c; do
            keyname=$(echo "$c" | jq -r '.[0]')
            value=$(echo "$c" | jq -r '.[1]')
            type=$(echo "$c" | jq -r '.[2]')
            
            if [ "$type" == "SecureString" ]; then
              echo "##vso[task.setvariable variable=$outputVariableNamePrefix$keyname;issecret=true]$value"
              echo "Added variable '$outputVariableNamePrefix$keyname' ('$type') with secret value '******'"
            elif [ "$type" == "String" ]; then 
              echo "##vso[task.setvariable variable=$outputVariableNamePrefix$keyname]$value"
              echo "Added variable '$outputVariableNamePrefix$keyname' ('$type') with value '$value'"
            else 
              echo "##[warning]Skipped output variable conversion: Type '$type' is not supported for '$keyname'"
            fi
            
          done    
      } 