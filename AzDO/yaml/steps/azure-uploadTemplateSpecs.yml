parameters:
- name: semverMajor
- name: semverMinor
- name: semverPatch
- name: preReleaseLabel
  default: ""
- name: filter
  default: '*.json|*.bicep'
- name: resourceGroupName
- name: resoureGrouplocation
- name: templateFolder
- name: azureSubscriptionName
  displayName: "Name of the Azure Subscription as defined in service connections"
- name: publishWildcardVersions
  type: boolean
  default: false
- name: publishLatest
  type: boolean
  default: true

steps:  
- task: AzureCLI@2
  displayName: 'Upload Template Specs to ${{ parameters.resourceGroupName  }}'
  env:
    semverMajor: '${{ parameters.semverMajor  }}'
    semverMinor: '${{ parameters.semverMinor  }}'
    semverPatch: '${{ parameters.semverPatch  }}'
    resourceGroupName: "${{ parameters.resourceGroupName  }}"
    location: "${{ parameters.resoureGrouplocation  }}"
    sourceFolder: "${{ parameters.templateFolder  }}"
    filter: "${{ parameters.filter  }}"
    publishWildcardVersions: ${{ parameters.publishWildcardVersions  }}
    publishLatest: ${{ parameters.publishLatest  }}
    preReleaseLabel: ${{ parameters.preReleaseLabel  }}
  inputs:
    failOnStandardError: true
    azureSubscription: '${{ parameters.azureSubscriptionName }}'
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      set -e
      echo "##[section]Determining version labels"
      if [[ ( "$preReleaseLabel" != "" ) ]]; then 
        publishWildcardVersions='false'
        publishLatest='false'
        if [[ ( $preReleaseLabel != -* ) ]]; then 
          preReleaseLabelWithDash="-$preReleaseLabel"
        else
          preReleaseLabelWithDash="$preReleaseLabel"
        fi
      fi

      semanticVersion="${semverMajor}.${semverMinor}.${semverPatch}${preReleaseLabelWithDash}"
      majorWildcard="${semverMajor}.x.x${preReleaseLabelWithDash}"
      minorWildcard="${semverMajor}.${semverMinor}.x${preReleaseLabelWithDash}"

      echo "Publishing '${semanticVersion}' as semantic version."
      versions="${semanticVersion}"

      # Case insensitive compare
      if [[ "${publishWildcardVersions,,}" == "true" ]]; then 
        echo "Publishing '${majorWildcard}' and '${minorWildcard}' as wildcard versions."
        versions+=("${majorWildcard}" "${minorWildcard}")
      fi

      # Case insensitive compare
      if [[ "${publishLatest,,}" == "true" ]]; then 
        if [[ "$preReleaseLabel" == "" ]]; then 
          echo "Publishing 'latest' as rolling version."
          versions+=("latest")
        else 
          echo "##[warning]Pre-release label present: skipping publish of 'latest' as version."
        fi
      fi

      filter="@($filter)"

      # ensure linux-compatible relative path 
      sourceFolder="${sourceFolder//\\//}" 
      sourceFolder="${sourceFolder#"$PWD"}" 

      if [[ $sourceFolder == /* ]]; then 
        sourceFolder=".$sourceFolder" 
      fi

      hasUploadedAnything=false

      #https://unix.stackexchange.com/a/494146
      function dir_upload_templatespecs () {    
        shopt -s nullglob dotglob extglob
        local path=$1
        echo "##[debug] --- Scan of Directory [$path] STARTED ---"
        shift 1
        local -a versions=("$@")
        for pathname in "$path"/*; do
          if [ -d "$pathname" ]; then
            dir_upload_templatespecs "$pathname" "${versions[@]}"
          else
            case "$pathname" in
              $filter)
                local fileRoot="$(basename "$pathname" | sed 's/\(.*\)\..*/\1/')"
                local fileDir="${pathname%/*}"

                # Template specs do not support folders, so the file path relative to the source folder is converted to a dot (.) separated "namespace"
                local filePathInSourceFolder=${fileDir#"$sourceFolder"}
                filePathInSourceFolder=${filePathInSourceFolder#"/"}
                # Template specs are all stored as ARM anyway, so the file name can be added without keeping the extension
                namespacedFileName="${filePathInSourceFolder////.}.$fileRoot"

                echo "##[group]Publishing [$pathname] as [$namespacedFileName]"
                for version in "${versions[@]}"
                do
                  hasUploadedAnything=true #It's quite ugly to use a global var for this, but it works.
                  local cmd="az ts create --yes --name \"$namespacedFileName\" --version \"$version\" --resource-group \"$resourceGroupName\" --location \"$location\" --template-file \"$pathname\""
                  echo "##[command]$cmd"
                  eval "$cmd"
                done
                echo "##[endgroup]"
              ;;   
              *)
                echo "##[debug] SKIP: $pathname NOT in $filter"
              ;;  
            esac
          fi
        done
        echo "##[debug] --- Scan of Directory [$path] COMPLETED ---"
      }
      echo "##[section]Publish Template Specs to resource group [$resourceGroupName]"

      dir_upload_templatespecs "$sourceFolder" "${versions[@]}"

      if $hasUploadedAnything ; then 
        exit 0
      else 
        exit 1
      fi
