# For optimal effect, set the build name in the root yaml file to
# name: $(date:yyyy.M.d)$(rev:.r) 

# Azure Devops Marketplace tasks used in this template: 
# - https://marketplace.visualstudio.com/items?itemName=gittools.gittools

parameters:
- name: 'gitVersionConfigFilePath'
  type: string
  default: '.pipelines/build/GitVersion.yml'
- name: 'rootBranchName'
  displayName: 'Name of the root branch of the repository triggering the build.'
  type: string
  default: 'refs/heads/main'
- name: 'useBuildNumberForPreReleaseTag'
  displayName: 'Set to true if the VERSIONING_PACKAGEVERSION should be suffixed with the buildnumber.'
  type: boolean
  default: true

steps:     
  - powershell: |
      # The buildnumber is used by Gitversion to get the initial yyyy.mm.dd.rev, but is then automatically overwritten. 
      # There is no other way to access the .rev value -> https://learn.microsoft.com/en-us/azure/devops/pipelines/process/run-number?view=azure-devops&tabs=yaml
      # Therefore it needs to be cleared and rewritten in case the "rerun failed jobs" button is pressed in Azure Devops -> this resets the build name to the original value, allowing the pipeline to run idempotent.
      $buildNumber = ('$(Build.BuildNumber)' -split ' ')[0]
      Write-Host "##vso[build.updatebuildnumber]$buildNumber"  

      # GitVersion's pre-release label does not work the same for branch builds triggered by a PR versus branch builds that are manually triggered. 
      # I have not yet figured out if that is changeable in gitconfig.yml, so this is my workaround. 

      if('$(Build.SourceBranch)' -ne '${{ parameters.rootBranchName }}' )  
      {
        if(('$(system.pullrequest.targetbranch)' -split '/')[-1] -eq ('${{ parameters.rootBranchName }}' -split '/')[-1])  
        {
          # Manual Branch Build
          $sourceBranch = ('$(system.pullrequest.sourcebranch)' -split '/')[-1]
        } else {
          # PR Branch build
          $sourceBranch = '$(Build.SourceBranchName)'
        }
        $sanitizedSourceBranch = $sourceBranch.replace('_', '-') # gitversion replaces underscores with dashes. This variable must match that practice to be useful in scripts
        Write-Host "##vso[task.setvariable variable=VERSIONING_PRERELEASELABELWITHDASH]-$sanitizedSourceBranch"  
        write-host "VERSIONING_PRERELEASELABELWITHDASH='-$sanitizedSourceBranch'"
      } else {
        # Root Build
        Write-Host "##vso[task.setvariable variable=VERSIONING_PRERELEASELABELWITHDASH]"
        write-host "VERSIONING_PRERELEASELABELWITHDASH=''"
      }
    displayName: 'Versioning - Set VERSIONING_PRERELEASELABELWITHDASH'   
  
  - task: gittools.gittools.setup-gitversion-task.gitversion/setup@0
    displayName: Versioning - Setup Gitversion
    inputs:
      versionSpec: 5.x

  # Gitversion will makes these variables available:  
  # https://gitversion.net/docs/reference/variables
  - task: gittools.gittools.execute-gitversion-task.gitversion/execute@0
    displayName: Versioning - Compute Gitversion
    inputs:
      useConfigFile: true
      configFilePath: ${{ parameters.gitVersionConfigFilePath }}
  
  - powershell: |
      if(('$(VERSIONING_PRERELEASELABELWITHDASH)' -ne '') -and ('${{ parameters.useBuildNumberForPreReleaseTag }}'.ToLower() -eq 'true'))  
      {
        $packageVersion= "$(Gitversion.InformationalVersion)-$(Gitversion.AssemblySemFileVer)"
      } else {
        $packageVersion= "$(Gitversion.InformationalVersion)"
      }
      $buildNumber = "$(Gitversion.AssemblySemFileVer) [$packageVersion]"
      Write-Host "##vso[build.updatebuildnumber]$buildNumber"  
      Write-Host "##vso[task.setvariable variable=VERSIONING_PACKAGEVERSION]$packageVersion"  
      Write-Host "VERSIONING_PACKAGEVERSION='$packageVersion'"  

    displayName: 'Versioning - Set VERSIONING_PACKAGEVERSION'     
