# Full workflow for creating a pipeline in Azure Devops to create nuget packages from an Azure Devops Git repo, to be published to Azure Devops Artifacts. 
# Features: 
#   - Pre-release on Pull Request
#   - Full release when a Pull Request is accepted and merged
#   - Gitversion is used for automatic semantic versioning
#   - Outputs debug symbols and uses Source Link to provide step-into-package-code during debugging
#
# Best used in combination with the template nuget package (TODO: link)
#
# Prerequisites: 
# The Project Collection Build Server ACCOUNT - (not the GROUP!) - needs the following permissions: 
# - Tag
# - Contribute
# These can be set by going to Manage Repositories -> All repositories -> Security
# Azure Devops Marketplace tasks required to use this template. 
# Please check them for further prerequisites and permission settings.
# - https://marketplace.visualstudio.com/items?itemName=gittools.gittools)

parameters:
- name: azureArtifactsFeed
- name: buildSteps
  type: stepList
- name: dependsOn
  type: object
  default: []
- name: rootBranchName
  type: string
  default: 'refs/heads/main'
- name: gitVersionConfigFilePath
  type: string  
  default: 'GitVersion.yml'
- name: publishSymbols
  type: boolean
  default: true
- name: pdbArtifactName
  type: string  
  default: 'PdbSymbols'
- name: pdbFilter
  type: string  
  default: '**/bin/**/*.pdb'
- name: workspace
  type: object
  default: {
    clean: all
  }
- name: buildJobName
  type: string  
  default: 'BuildPackage'
- name: windowsPool
  type: object
  default: {
    vmImage: 'windows-latest'
  }

# TODO: retest all this. Should work for repo's in Azure Devops and Github

jobs:
- job: ${{ parameters.buildJobName }}
  displayName: Autoversion and build Nuget package
  variables:
    #preventing git shallow clone to fix gitversion error  https://github.com/GitTools/GitVersion/issues/3091
    Agent.Source.Git.ShallowFetchDepth: 0
  dependsOn: ${{ parameters.dependsOn }}
  condition: succeeded()
  workspace:
    ${{ parameters.workspace }}
  steps:
  - checkout: self
    displayName: "Checkout repository including submodules"
    submodules: true
    persistCredentials: true

  - template: ../steps/computeGitVersion.yml
    parameters:
      gitVersionConfigFilePath: ${{ parameters.gitVersionConfigFilePath }}
      rootBranchName: ${{ parameters.rootBranchName }}

  - ${{ parameters.buildSteps }}

  - script: |
      git tag v$(Gitversion.MajorMinorPatch)
      git push origin "v$(Gitversion.MajorMinorPatch)"
    condition: and(succeeded(), eq('${{ variables['Build.SourceBranch'] }}', '${{ parameters.rootBranchName }}'))
    workingDirectory: $(Build.SourcesDirectory)
    displayName: Versioning - Tag commit on release

  - ${{ if parameters.publishSymbols }}:
    - task: CopyFiles@2
      displayName: Symbols - Collect ${{ parameters.pdbFilter }} for '${{ parameters.pdbArtifactName }}' artifact
      inputs:
        contents: '${{ parameters.pdbFilter }}' 
        targetFolder: '$(Build.ArtifactStagingDirectory)/${{ parameters.pdbArtifactName }}'
        flattenFolders: true

  - ${{ if parameters.publishSymbols }}:
    - task: PublishPipelineArtifact@1
      displayName: Symbols - Publish '${{ parameters.pdbArtifactName }}' artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/${{ parameters.pdbArtifactName }}'
        artifactName: '${{ parameters.pdbArtifactName }}'

  - task: DotNetCoreCLI@2
    displayName: 'NuGet - Push package(s) to [${{ parameters.azureArtifactsFeed }}]'
    inputs:
      command: push
      packagesToPush: '$(System.DefaultWorkingDirectory)/src/**/*.nupkg'
      publishVstsFeed: '${{ parameters.azureArtifactsFeed }}'

#Separate job to ensure that it is running on windows
- ${{ if parameters.publishSymbols }}:
  - template: AzDOArtifacts_publishPdbSymbols.yml
    parameters:
      pdbArtifactName: ${{ parameters.pdbArtifactName }}
      dependsOn: ${{ parameters.buildJobName }}
      pool: ${{ parameters.windowsPool }}

      

  # - job: PublishAzDO
  #   dependsOn: ${{ parameters.buildJobName }}
  #   condition: succeeded()
  #   displayName: Publish Symbols to Azure Devops Artifacts
  #   pool: ${{ parameters.windowsPool }}
  #   steps:
  #   - checkout: none
  #     displayName: "SKIP - checkout code is not required"

  #   # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/download-pipeline-artifact?view=azure-devops
  #   - task: DownloadPipelineArtifact@2
  #     displayName: "Download Artifact - '${{ parameters.pdbArtifactName }}'"
  #     inputs:
  #       downloadPath: '$(Pipeline.Workspace)'
  #       buildType: current
  #       artifact: ${{ parameters.pdbArtifactName }}      

  #   # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/index-sources-publish-symbols?view=azure-devops
  #   - task: PublishSymbols@2
  #     displayName: 'Symbols - Upload *.pdb to Azure Devops Artifacts'
  #     inputs:
  #       symbolsFolder: '$(Pipeline.Workspace)'
  #       searchPattern: '**\*.pdb'
  #       indexSources: false
  #       SymbolServerType: 'TeamServices'
