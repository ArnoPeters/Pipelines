# Full workflow for creating a pipeline in Azure Devops to create nuget packages from an Azure Devops Git repo, to be published to Azure Devops Artifacts. 
# For optimal effect, set the build name in the root yaml file to
# name: $(date:yyyy.M.d)$(rev:.r) 
#
# Features: 
#   - Pre-release on Pull Request
#   - Full release when a Pull Request is accepted and merged
#   - Gitversion is used for automatic semantic versioning
#   - Outputs debug symbols and uses Source Link to provide step-into-package-code during debugging
#
# Best used in combination with the template nuget package (TODO: link)
#
# Prerequisites: 
# The Project Collection Build Server ACCOUNT - (not the GROUP!) - needs the following permissions: 
# - Tag
# - Contribute
# These can be set by going to Manage Repositories -> All repositories -> Security
# Azure Devops Marketplace tasks required to use this template. 
# Please check them for further prerequisites and permission settings.
# - https://marketplace.visualstudio.com/items?itemName=gittools.gittools)

parameters:
- name: azureArtifactsTargetFeed
- name: buildSteps
  type: stepList
- name: dependsOn
  type: object
  default: []
- name: rootBranchName
  type: string
  default: 'refs/heads/main'
- name: gitVersionConfigFilePath
  type: string  
  default: '.pipelines/GitVersion.yml'
- name: publishSymbols
  type: boolean
  default: true
- name: pdbArtifactName
  type: string  
  default: 'PdbSymbols'
- name: pdbFilter
  type: string  
  default: '**/bin/**/*.pdb'
- name: workspace
  type: object
  default: {
    clean: all
  }
- name: buildJobName
  type: string  
  default: 'BuildPackage'
- name: windowsPool
  type: object
  default: {
    vmImage: 'windows-latest'
  }
- name: publishPreRelease
  type: boolean
  default: false

jobs:
- job: ${{ parameters.buildJobName }}
  displayName: Autoversion and publish Nuget package
  variables:
    # preventing git shallow clone to fix gitversion error  https://github.com/GitTools/GitVersion/issues/3091
    Agent.Source.Git.ShallowFetchDepth: 0
    isRelease: ${{ eq(variables['Build.SourceBranch'], parameters.rootBranchName) }}
    shouldPublishPackage: ${{ or (eq(variables.isRelease, 'True'), and(ne(variables.isRelease, 'True') , parameters.publishPreRelease))  }}
    shouldPublishSymbols: ${{ and(eq(parameters.publishSymbols, 'True'),eq(variables.shouldPublishPackage, 'True')) }} #publishSymbols && shouldpublishpackage
  dependsOn: ${{ parameters.dependsOn }}
  condition: succeeded()
  workspace:
    ${{ parameters.workspace }}
  steps:
  - checkout: self
    displayName: "Checkout repository including submodules"
    submodules: true
    persistCredentials: true

  - template: ../steps/computeGitVersion.yml
    parameters:
      gitVersionConfigFilePath: ${{ parameters.gitVersionConfigFilePath }}
      rootBranchName: ${{ parameters.rootBranchName }}

  - ${{ parameters.buildSteps }}

  - ${{ if eq(variables.shouldPublishSymbols, 'True') }}:
    - task: CopyFiles@2
      displayName: Symbols - Collect ${{ parameters.pdbFilter }} for '${{ parameters.pdbArtifactName }}' artifact
      inputs:
        contents: '${{ parameters.pdbFilter }}' 
        targetFolder: '$(Build.ArtifactStagingDirectory)/${{ parameters.pdbArtifactName }}'
        flattenFolders: true

  - ${{ if eq(variables.shouldPublishSymbols, 'True') }}:
    - task: PublishPipelineArtifact@1
      displayName: Symbols - Publish '${{ parameters.pdbArtifactName }}' artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/${{ parameters.pdbArtifactName }}'
        artifactName: '${{ parameters.pdbArtifactName }}'
  
  # Tag the source even if the package upload fails later - better to republish with a gap in the version, than not tagging -> not tagging causes failed uploads when retrying. 
  - ${{ if eq(variables.isRelease, 'True') }}:
    - template: ../steps/tagCommit.yml
      parameters:
        value: 'v$(Gitversion.MajorMinorPatch)'
  
  - ${{ if eq(variables.shouldPublishPackage, 'True') }}:
    - task: DotNetCoreCLI@2
      displayName: 'NuGet - Push package(s) to [${{ parameters.azureArtifactsTargetFeed }}]'
      inputs:
        command: push
        nuGetFeedType: 'internal'
        packagesToPush: '$(System.DefaultWorkingDirectory)/src/**/*.nupkg'
        publishVstsFeed: '${{ parameters.azureArtifactsTargetFeed }}'

# Separate job to ensure that it is running on windows (as it won't work on linux)
- ${{ if eq(variables.shouldPublishSymbols, 'True') }}:
  - template: AzDOArtifacts_publishPdbSymbols.yml
    parameters:
      pdbArtifactName: ${{ parameters.pdbArtifactName }}
      dependsOn: ${{ parameters.buildJobName }}
      pool: ${{ parameters.windowsPool }}
