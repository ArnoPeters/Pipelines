parameters:
- name: 'Subscription'
  type: string
- name: 'ResourceGroupName'
  type: string
  default: ''
- name: 'ResourceLocation'
  type: string
  default: ''
- name: 'TemplateFile'
  type: string
- name: 'TemplateParameterFile'
  type: string
- name: 'ParameterOverrides'
  type: string
  default: ''
- name: 'OutputVariableNamePrefix'
  type: string
  default: ''
- name: 'deploymentName'
  type: string
  default: ''

steps:

# Based on the script found on https://blog.johnnyreilly.com/2021/03/20/bicep-meet-azure-pipelines/
# While awaiting official microsoft pipeline task https://github.com/Azure/bicep/issues/1341
- task: AzureCLI@2
  displayName: 'Bicep: Template deployment'
  inputs:
    azureSubscription: '${{ parameters.Subscription }}'
    failOnStandardError: true
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      deploymentName=${{ parameters.deploymentName }}
      if [ "$deploymentName" == "" ]; then 
        deploymentName="deploy-$(date +%Y%m%d-%H%M%S)"
      fi

      params=""
      if [ "${{ parameters.ParameterOverrides }}" != "" ]; then 
        params+=" --parameters ${{ parameters.ParameterOverrides }}"
      fi
      if [ "${{ parameters.TemplateParameterFile }}" != "" ]; then 
        params+=" --parameters @${{ parameters.TemplateParameterFile }}"
      fi
      
      if [ "${{ parameters.ResourceGroupName }}" == "" ]; then
        az deployment sub create \
          --name $deploymentName \
          --location ${{ parameters.ResourceLocation }} \
          --template-file ${{ parameters.TemplateFile }} \
          $params

          echo "az deployment sub show --name $deploymentName"
          deploymentoutputs=$(az deployment sub show --name $deploymentName \
            --query properties.outputs)
      elif [ "${{ parameters.ResourceLocation }}" == "" ]; then

        az deployment group create \
          --name $deploymentName \
          --resource-group ${{ parameters.ResourceGroupName }} \
          --template-file ${{ parameters.TemplateFile }} \
          $params

          echo "az deployment group show --resource-group '$(resourceGroupName)' --name $deploymentName"
          deploymentoutputs=$(az deployment group show --resource-group '$(resourceGroupName)' --name $deploymentName \
            --query properties.outputs)
      else
        echo "Specify either ResourceGroup or ResourceLocation."
      fi

      echo 'convert outputs to variables'
      echo $deploymentoutputs | jq -c '. | to_entries[] | [.key, .value.value, .value.type]' |
        while IFS=$"\n" read -r c; do
          keyname=$(echo "$c" | jq -r '.[0]')
          value=$(echo "$c" | jq -r '.[1]')
          type=$(echo "$c" | jq -r '.[2]')
          
          if [ "$type" == "SecureString" ]; then
            echo "##vso[task.setvariable variable=${{ parameters.OutputVariableNamePrefix }}$keyname;issecret=true]$value"
            echo "Added variable '$keyname' ('$type')"
          elif [ "$type" == "String" ]; then 
            echo "##vso[task.setvariable variable=${{ parameters.OutputVariableNamePrefix }}$keyname]$value"
            echo "Added variable '$keyname' ('$type') with value '$value'"
          else 
            echo "Skipped output variable conversion: Type '$type' is not supported for '$keyname'"
          fi
          
        done
