parameters:
- name: 'Subscription'
  type: string
- name: 'ResourceGroupName'
  type: string
- name: 'ResourceLocation'
  type: string
- name: 'TemplateFile'
  type: string
- name: 'TemplateParameterFile'
  type: string
- name: 'ParameterOverrides'
  type: string
  default: ''
- name: 'OutputVariableNamePrefix'
  type: string
  default: ''
  
steps:
# - task: AzureResourceGroupDeployment@2
#   #name: deployTemplates #todo: make name variable and test. 
#   displayName: 'Bicep: Template deployment'
#   inputs:
#     azureSubscription: '${{ parameters.Subscription }}'
#     resourceGroupName: '${{ parameters.ResourceGroupName }}'
#     location: '${{ parameters.ResourceLocation }}'
#     csmFile: '${{ parameters.TemplateFile }}'
#     csmParametersFile: '${{ parameters.TemplateParameterFile }}'
#     overrideParameters: '${{ parameters.ParameterOverrides }}'
#     deploymentOutputs: ArmDeploymentOutputs

#//https://blog.johnnyreilly.com/2021/03/20/bicep-meet-azure-pipelines/
- task: AzureCLI@2
  displayName: 'Bicep: Template deployment'
  inputs:
    azureSubscription: '${{ parameters.Subscription }}'
    failOnStandardError: true
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      params = ""
      if ['${{ parameters.ParameterOverrides }}' != '']; then 
       params = params + "--parameters ${{ parameters.ParameterOverrides }}"
      fi
      az deployment group create \
        --name deploy \
        --resource-group ${{ parameters.ResourceGroupName }} \
        --template-file ${{ parameters.TemplateFile }} \
        --parameters @${{ parameters.TemplateParameterFile }} \
        $params

      echo "az deployment group show --resource-group '$(resourceGroupName)' --name deploy"
      deploymentoutputs=$(az deployment group show --resource-group '$(resourceGroupName)' --name deploy \
        --query properties.outputs)

      echo 'convert outputs to variables'
      echo $deploymentoutputs | jq -c '. | to_entries[] | [.key, .value.value]' |
        while IFS=$"\n" read -r c; do
          outputname=$(echo "$c" | jq -r '.[0]')
          outputvalue=$(echo "$c" | jq -r '.[1]')
          echo "setting variable ${{ parameters.OutputVariableNamePrefix }}$outputname=$outputvalue"
          echo "##vso[task.setvariable variable=${{ parameters.OutputVariableNamePrefix }}$outputname]$outputvalue"
        done

# #script based on https://www.timmerman.it/index.php/using-values-from-your-arm-template-across-your-azure-devops-pipeline-with-powershell/
# - powershell: |
#     $outputs = '$(ArmDeploymentOutputs)' | ConvertFrom-Json
#     $outputs.PSObject.Properties | ForEach-Object {
#       $type = ($_.value.type).ToLower()
#       $keyname = "{0}{1}" -f '${{ parameters.OutputVariableNamePrefix }}', $_.name 
#       $value = $_.value.value

#       if ($type -eq "securestring") {
#         $var = '##vso[task.setvariable variable={0};issecret=true]{1}' -f $keyname, $value
#         Write-Output $var
#         Write-Output "Added variable '$keyname' ('$type')"
#       } elseif ($type -eq "string") {
#         $var = '##vso[task.setvariable variable={0}]{1}' -f $keyname, $value
#         Write-Output $var
#         Write-Output "Added variable '$keyname' ('$type') with value '$value'"
#       } else {
#         Write-Output "Skipped conversion: Type '$type' is not supported for '$keyname'"
#       }
#     }
#   #name: ArmOutputToVariables #todo: make name variable and test. 
#   displayName: 'ARM: Expose output variables'
